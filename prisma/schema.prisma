// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// https://www.prisma.io/docs/orm/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  // relations
  screens       Screen[]
  App           App[]
  decks         Deck[]
}

model Screen {
  id           String   @id @default(uuid())
  name         String
  description  String?
  tags         String?
  slug         String
  uri          String
  fitType      String?  @default("cover")
  isApproved   Boolean  @default(false)
  isSensitive  Boolean  @default(false)
  isPortrait   Boolean  @default(false)
  referenceUrl String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  // relations
  createdBy    User     @relation(fields: [createdById], references: [id])
  createdById  String
  App          App[]
}

model App {
  id          String   @id @default(uuid())
  name        String
  description String?
  tags        String?
  slug        String
  screen      Screen?  @relation(fields: [screenId], references: [id])
  screenId    String?
  isApproved  Boolean  @default(false)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // relations
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
}

model Deck {
  id            String   @id @default(uuid())
  name          String
  description   String?
  slug          String
  serverAddress String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // relations
  createdBy     User     @relation(fields: [createdById], references: [id])
  createdById   String
  tiles         Tile[]
}

model Tile {
  id          String   @id @default(uuid())
  name        String
  icon        String?
  description String?
  type        String // can be get-api, launch-app or something
  command     String? // url incase of get api
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // relations
  deck        Deck     @relation(fields: [deckId], references: [id])
  deckId      String
}
